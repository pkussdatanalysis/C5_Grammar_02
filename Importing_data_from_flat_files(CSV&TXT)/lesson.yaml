- Class: meta
  Course: Grammar_02
  Lesson: Importing_data_from_flat_files
  Author: mzl
  Type: Standard
  Organization: pkuss
  Version: 2.4.3

- Class: text
  Output: 大量数据以平面文件的形式出现：简单的表格文本文件。 了解如何使用基本R函数导入所有常用格式的平面文件数据。

- Class: text
  Output: 在启动时自动加载到R会话中的utils包可以使用read.csv（）函数导入CSV文件

- Class: text
  Output: 在这个练习中，你将使用swimming_pools.csv; 它包含澳大利亚布里斯班游泳池的数据（资料来源：data.gov.au）。 
    该文件在第一行中包含列名称。 它使用逗号分隔行内的值。
    
- Class: cmd_question
  Output: 使用read.csv()将“swimming_pools.csv”作为数据框导入并赋值给变量pools。
  CorrectAnswer: pools <- read.csv(csv_path)
  AnswerTests: omnitest(correctExpr='pools <- read.csv(csv_path)')
  Hint: pools <- read.csv(csv_path)

- Class: cmd_question
  Output: 使用str()打印pools的结构。
  CorrectAnswer: str(pools)
  AnswerTests: omnitest(correctExpr='str(pools)')
  Hint: str(pools)
  
- Class: text
  Output: read.csv有参数stringsAsFactors，可以告诉R是否应该将平面文件中的字符串转换为因子。对于utils包中的所有导入函数，此参数为TRUE，
    这意味着您将字符串作为因子导入。 这只有在您导入的字符串表示R中的分类变量时才有意义。如果将stringsAsFactors设置为FALSE，
    则与文本文件中的字符串对应的数据框列将为字符。swimming_pools.csv文件包含两列（Name和Address），不应该是因子类型。
  
- Class: cmd_question
  Output: 使用read.csv()将“swimming_pools.csv”中的数据导入为一个名为pools的数据框; 确保字符串作为字符导入，而不是作为因子。
  CorrectAnswer: pools <- read.csv("swimming_pools.csv",stringsAsFactors=FALSE)
  AnswerTests: omnitest(correctExpr='pools <- read.csv("swimming_pools.csv",stringsAsFactors=FALSE)')
  Hint: 设置stringsAsFactors为FALSE。

- Class: cmd_question
  Output: 使用str()，显示数据集pools的结构，并检查确实得到了字符向量而不是因子。
  CorrectAnswer: str(pools)
  AnswerTests: omnitest(correctExpr='str(pools)')
  Hint: str(pools)

- Class: text
  Output: 除.csv文件外，还有基本上是文本文件的.txt文件。 你可以用read.delim（）来导入这些函数。 默认情况下，它将sep参数设置为“\ t”
    （记录中的字段由制表符分隔），并将header参数设置为TRUE（第一行包含字段名称）。

- Class: cmd_question
  Output: 导入hotdogs.txt，其中包含不同热狗中钠和热量水平的信息（来源：UCLA）。 数据集有3个变量，但变量名在文件的第一行中不可用。 
    该文件使用制表符作为字段分隔符。将导入的数据命名为数据框hotdogs。
  CorrectAnswer: hotdogs <- read.delim("hotdogs.txt",header=FALSE)
  AnswerTests: omnitest(correctExpr='hotdogs <- read.delim("hotdogs.txt",header=FALSE)')
  Hint: hotdogs <- read.delim("hotdogs.txt",header=FALSE)，注意header参数设置为FALSE。
  
- Class: cmd_question
  Output: 调用hotdogs的summary()。 这将打印出关于数据框中所有变量的汇总统计信息。
  CorrectAnswer: summary(hotdogs)
  AnswerTests: omnitest(correctExpr='summary(hotdogs)')
  Hint: summary(hotdogs)

- Class: text
  Output: 如果你正在处理更奇特的平面文件格式，你会想使用read.table（）。 这是最基本的导入功能; 你可以在这个函数中指定多个不同的参数。
    与read.csv（）和read.delim（）不同，header参数默认为FALSE，sep参数默认为""。

- Class: cmd_question
  Output: 数据仍然是hotdogs.txt。 它在第一行中没有列名称(使用col.names指定列名称,列名称为"type", "calories", "sodium")，
    字段分隔符是制表符'\t'(使用sep参数指定)，将结果赋值为变量hotdogs。
  CorrectAnswer: hotdogs <- read.table("hotdogs.txt",sep = "\t",col.names = c("type", "calories", "sodium"))
  AnswerTests: omnitest(correctExpr='hotdogs <- read.table("hotdogs.txt",sep = "\t",col.names = c("type", "calories", "sodium"))')
  Hint: hotdogs <- read.table("hotdogs.txt",sep = "\t",col.names = c("type", "calories", "sodium"))

- Class: cmd_question
  Output: 在hotdogs上打head(); 这将打印数据框中的前6个观察值。
  CorrectAnswer: head(hotdogs)
  AnswerTests: omnitest(correctExpr='head(hotdogs)')
  Hint: head(hotdogs)


- Class: text
  Output: 莉莉和汤姆正在争吵，因为他们想分享一个热狗，但他们似乎无法就要选择哪一个达成一致。 过了一段时间，
    他们只是决定他们每个人都会有一个。 莉莉想拥有最少卡路里(calories)的热量，而汤姆想拥有最多的钠(sodium)。

- Class: text
  Output: 除了calories和sodium，hotdogs还有一个变量：type。 这可以是三种之一：Beef, Meat,或者 Poultry，所以是一个分类变量：
    一个因子是好的。

- Class: cmd_question
  Output: 通过read.delim（）调用以导入“hotdogs.txt”中的数据。 这是一个制表符分隔的文件，在第一行没有名字,通过col.names指定列名称为
    "type", "calories", "sodium"
  CorrectAnswer: hotdogs <- read.delim("hotdogs.txt", header = FALSE, col.names = c("type", "calories", "sodium"))
  AnswerTests: omnitest(correctExpr='hotdogs <- read.delim("hotdogs.txt", header = FALSE, col.names = c("type", "calories", "sodium"))')
  Hint: hotdogs <- read.delim("hotdogs.txt", header = FALSE, col.names = c("type", "calories", "sodium"))

- Class: cmd_question
  Output: 选择卡路里数最低的观察值并将其存储在变量lily。 使用函数which.min（），它返回一个向量中的最小值的索引。
  CorrectAnswer: lily <- hotdogs[which.min(hotdogs$calories), ]
  AnswerTests: omnitest(correctExpr='lily <- hotdogs[which.min(hotdogs$calories), ]')
  Hint: lily <- hotdogs[which.min(hotdogs$calories), ]

- Class: cmd_question
  Output: 为Tom做一个类似的事情：选择钠含量最高的观察点并存放在tom。 这次使用which.max（）。
  CorrectAnswer: tom <- hotdogs[which.max(hotdogs$sodium), ]
  AnswerTests: omnitest(correctExpr='tom <- hotdogs[which.max(hotdogs$sodium), ]')
  Hint: tom <- hotdogs[which.max(hotdogs$sodium), ]

- Class: cmd_question
  Output: 打印lily。
  CorrectAnswer: lily
  AnswerTests: omnitest(correctExpr='lily')
  Hint: lily

- Class: cmd_question
  Output: 打印tom。
  CorrectAnswer: tom
  AnswerTests: omnitest(correctExpr='tom')
  Hint: tom
  
- Class: mult_question
  Output: 确定将这次练习的结果提交吗?
  CorrectAnswer: NULL
  AnswerChoices: Yes;No
  AnswerTests: post_on_demand()
  Hint: ""  
